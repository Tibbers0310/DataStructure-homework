//实例：(5*(12-3)+4)/2=24;4+2*3-10/5=8;
#include<stdio.h>
#define MAXSIZE 30
void calculate(SqStack* op, SqStack* num){
	SElemType op1, op2;
	SElemType opf;
	pop(num, op2);
	pop(num, op1);
	pop(op, opf);
	SElemType tmpResult;
	int tmpResult = 0;
	switch(opf){
		case '+':
			tmpResult = op1 + op2;			
			break;
		case '-':
			tmpResult = op1 - op2;
			break;
		case '*':
			tmpResult = op1 * op2;
			break;
		case '/':
			tmpResult = op1 / op2;
			break;
	}
	push(num, tmpResult);
}
//处理简单表达式
void dealExpression(){
	SqStack op, num;
	initStack(op);
	initStack(num);
	//初始化op栈和num栈:栈为空：top=0;栈满：top=MAXSIZE
	printf("请输入简单表达式(以#号结束)：");
	char currentChar;
	scanf("%c", &currentChar);
	while(currentChar!='#'){
		switch(currentChar){
			case '+':
			case '-':
				if(!isEmpty(op)){
					SElemType e;
					getTopElem(op, e);
					while(e != '('){//op栈不为空且栈顶元素不为'('，即为'+'、'-'、'*'、'/'，都应该进行运算
						calculate();						
					}
					//此时e为'('，则应入栈
					push(op, currentChar);
					scanf("%c", currentChar);
				}
				break;
			case '*':
			case '/':
				if(!isEmpty(op)){
					SElemType e;
					getTopElem(op, e);
					if(e == '*'||e == '/'){//则应进行计算
						calculate();
					}
					push(op, currentChar);
					scanf("%c", currentChar);
				}
				break;
			case '(':
				push(op, currentChar);
				scanf("%c", &currentChar);
				break;
			case ')' :
				if(!isEmpty(op)){//栈不为空
					SElemType e;
					getTopElem(op, e);
					while(e!='('){
						calculate();
					}
					//此时op栈顶元素e为'('，应该弹出左括号
					SElemType popElem;
					pop(op, popElem);
					scanf("%c", currentChar);
				}
				break;
			default://currentChar为数字，则入num栈
				do{
					opNum = opNum*10 + currentChar-'0';
					scanf("%c", &currentChar);
				}while(currentChar>='0'&&currentChar<='9');
				push(num, opNum);
				scanf("%c", currentChar);
				break;
		}
	}
	//while结束，说明表达式已经输入结束，则只要op栈不为空，就应进行计算
	//当op栈为空时，则弹出num栈栈顶元素即为运算结果
	SElemType e;
	getTopElem(op, e);
	
	while(isEmpty()){
		calculate();
	}
	SElemType result;
	getTopElem(op, result);
	printf("计算结果是%d\n", result);
}
int main(){
	dealExpression();
	return 0;
}

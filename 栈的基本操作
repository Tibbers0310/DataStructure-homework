#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#define MaxSize 100
#define INCREMENT 10
typedef struct {
    int stacksize;
    int* top;
    int *base;
}SqStack;
int InitStack(SqStack* s) {
    s->base = (int*)malloc(MaxSize * sizeof(int));
    if (!s->base) return 0;//存储分配失败
    s->top = s->base;
    s->stacksize = MaxSize;
    return 1;
}
int  Push(SqStack* s, int e) {//入栈
    if (s->top - s->base >= s->stacksize) {//栈满，追加空间
        s->base = (int*)realloc(s->base, (s->stacksize + INCREMENT) * sizeof(int));
        if (!s->base) return 0;
        s->top = s->base + s->stacksize;
        s->stacksize += INCREMENT;
    }
    *s->top = e;
    s->top++;
    return 1;
}
int Pop(SqStack* s) {//出栈
    if (s->top == s->base) return -1;//栈空
    s->top--;
    int e;
    e = *s->top;
    return e;
}
int GetLen(SqStack *s)//栈的长度
{
	int len;
	len=s->top - s->base;
	return len;
}
void ClearStack(stack *s)//清空栈
{
	s->top = s->base;
}
void DestroyStack(stack *s)//销毁栈
{
	s->top = s->base;
	free(s->base);
	s->stack_size=0;
}
int main()
{
    SqStack s;
    int i, x;
    InitStack(&s);
    printf("请输入三个整数，入栈\n");
    for (i = 0; i < 3; i++) {
        scanf("%d", &x);
        Push(&s, x);
    }
    printf("依次出栈的元素分别为\n");
    while (s.top != s.base) {
        x = Pop(&s);
        printf("%d ", x);
    }
    printf("\n");
}

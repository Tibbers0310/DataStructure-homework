/*约瑟夫环问题 Josephus：编号为1，2，3，…，n的n个人按顺时针方向围坐一圈，任选一个正整数作为报数上限m（其中m<n）。
从第一个人开始按顺时针方向自1开始顺序报数，报到m时停止报数。报m的人出列，从他在顺时针方向上的下一个人重新从1报数，如此下去，直至所有人全部出列。*/

#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>?

typedef struct node   //线性表的单向循环链式存储结构
{	int data;                   //数据域
	struct node *next;    //指向后继结点的指针域
}Lnode,*LinkList;
void CreatList(LinkList L,int n)   //表尾插入结点构造指定长度的单向循环链表
{	int i;
	Lnode *p,*s;
	p=L;   //p表示表尾结点
	for(i=1;i<n;i++)
	{	s=(LinkList)malloc(sizeof(Lnode));
		s->data=i+1;
		s->next=p->next;
		p->next=s;
		p=s;
	}
	p->next=L;
}
void printList(LinkList L,int n)   //输出单向循环链表
{
	Lnode *p=L;
	int i;
	for(i=0;i<n;i++)
	{
		printf("%d  ",p->data);
		p=p->next;
	}
}
void LinkListDelete(LinkList L,int n,int m)  //依次删除线性表的第m个元素
{	
	Lnode *p,*s;
	int i,j;  //p指向单向循环链表的第一个结点，j为计数器
	p=L;	
	for(i=0;i<n;i++)	
	{	j=1;
		while(j<m-1)   //沿指针向后查找，直到p指向第m-1个元素 
		{	p=p->next;
			j++;
		}
//s指向第m个元素,删除该结点
		s=p->next;
		p->next=s->next;
		printf("%d  ",s->data);
		free(s);
		p=p->next;
	}	
}
int main( )
{
	LinkList L;
	int m,n;	
	L=(LinkList)malloc(sizeof(Lnode)); //构造不带头结点的单链表
	L->data=1;  	L->next=L;
	printf("请输入参与游戏的初始人数：\n");
	scanf("%d",&n);	CreatList(L,n);
    printf("\n参与游戏人员编号分别为：\n");
	printList(L,n);
	printf("\n");
	printf("\n请输入报数上限：\n");
	scanf("%d",&m);
	printf("\n依次出列的人员编号为：\n");
	LinkListDelete(L,n,m);
	printf("\n");
}
